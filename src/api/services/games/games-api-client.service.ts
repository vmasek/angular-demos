/**
 * This file is auto-generated by the API client generator.
 * https://github.com/flowup/api-client-generator
 *
 * Avoid editing this file manually unless necessary.
 * Please report any bugs so they can be addressed in future versions.
 */

/* tslint:disable */
/* eslint-disable */

import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { GamesAPIClientInterface } from './games-api-client.interface';
import { Observable } from 'rxjs';
import { DefaultHttpOptions, HttpOptions } from '../../types';

import * as models from '../../models';
export const USE_DOMAIN = new InjectionToken<string>(
  'GamesAPIClient_USE_DOMAIN',
);
export const USE_HTTP_OPTIONS = new InjectionToken<HttpOptions>(
  'GamesAPIClient_USE_HTTP_OPTIONS',
);

type APIHttpOptions = HttpOptions & {
  headers: HttpHeaders;
  params: HttpParams;
};

@Injectable()
export class GamesAPIClient implements GamesAPIClientInterface {
  readonly options: APIHttpOptions;

  readonly domain: string = `https://api.rawg.io/api`;

  constructor(
    private readonly http: HttpClient,
    @Optional() @Inject(USE_DOMAIN) domain?: string,
    @Optional() @Inject(USE_HTTP_OPTIONS) options?: DefaultHttpOptions,
  ) {
    if (domain != null) {
      this.domain = domain;
    }

    this.options = {
      headers: new HttpHeaders(
        options && options.headers ? options.headers : {},
      ),
      params: new HttpParams(options && options.params ? options.params : {}),
      ...(options && options.reportProgress
        ? { reportProgress: options.reportProgress }
        : {}),
      ...(options && options.withCredentials
        ? { withCredentials: options.withCredentials }
        : {}),
    };
  }

  /**
   * Get a list of games.
   * Response generated for [ 200 ] HTTP response code.
   */
  list(
    args?: GamesAPIClientInterface['listParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  list(
    args?: GamesAPIClientInterface['listParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  list(
    args?: GamesAPIClientInterface['listParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  list(
    args: GamesAPIClientInterface['listParams'] = {},
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/games`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('page_size', String(args.pageSize));
    }
    if ('search' in args) {
      options.params = options.params.set('search', String(args.search));
    }
    if ('parentPlatforms' in args) {
      options.params = options.params.set(
        'parent_platforms',
        String(args.parentPlatforms),
      );
    }
    if ('platforms' in args) {
      options.params = options.params.set('platforms', String(args.platforms));
    }
    if ('stores' in args) {
      options.params = options.params.set('stores', String(args.stores));
    }
    if ('developers' in args) {
      options.params = options.params.set(
        'developers',
        String(args.developers),
      );
    }
    if ('publishers' in args) {
      options.params = options.params.set(
        'publishers',
        String(args.publishers),
      );
    }
    if ('genres' in args) {
      options.params = options.params.set('genres', String(args.genres));
    }
    if ('tags' in args) {
      options.params = options.params.set('tags', String(args.tags));
    }
    if ('creators' in args) {
      options.params = options.params.set('creators', String(args.creators));
    }
    if ('dates' in args) {
      options.params = options.params.set('dates', String(args.dates));
    }
    if ('platformsCount' in args) {
      options.params = options.params.set(
        'platforms_count',
        String(args.platformsCount),
      );
    }
    if ('excludeCollection' in args) {
      options.params = options.params.set(
        'exclude_collection',
        String(args.excludeCollection),
      );
    }
    if ('excludeAdditions' in args) {
      options.params = options.params.set(
        'exclude_additions',
        String(args.excludeAdditions),
      );
    }
    if ('excludeParents' in args) {
      options.params = options.params.set(
        'exclude_parents',
        String(args.excludeParents),
      );
    }
    if ('excludeGameSeries' in args) {
      options.params = options.params.set(
        'exclude_game_series',
        String(args.excludeGameSeries),
      );
    }
    if ('ordering' in args) {
      options.params = options.params.set('ordering', String(args.ordering));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get The Sitemap Games list.
   * Response generated for [ 200 ] HTTP response code.
   */
  sitemapRead(
    args?: GamesAPIClientInterface['sitemapReadParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  sitemapRead(
    args?: GamesAPIClientInterface['sitemapReadParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  sitemapRead(
    args?: GamesAPIClientInterface['sitemapReadParams'],
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  sitemapRead(
    args: GamesAPIClientInterface['sitemapReadParams'] = {},
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/games/sitemap`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('page_size', String(args.pageSize));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get a list of DLC's for the game, GOTY and other editions, companion apps, etc.
   * Response generated for [ 200 ] HTTP response code.
   */
  additionsList(
    args: Exclude<GamesAPIClientInterface['additionsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  additionsList(
    args: Exclude<GamesAPIClientInterface['additionsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  additionsList(
    args: Exclude<GamesAPIClientInterface['additionsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  additionsList(
    args: Exclude<GamesAPIClientInterface['additionsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/games/${args.gamePk}/additions`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('page_size', String(args.pageSize));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get a list of individual creators that were part of the development team.
   * Response generated for [ 200 ] HTTP response code.
   */
  developmentTeamList(
    args: Exclude<
      GamesAPIClientInterface['developmentTeamListParams'],
      undefined
    >,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  developmentTeamList(
    args: Exclude<
      GamesAPIClientInterface['developmentTeamListParams'],
      undefined
    >,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  developmentTeamList(
    args: Exclude<
      GamesAPIClientInterface['developmentTeamListParams'],
      undefined
    >,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  developmentTeamList(
    args: Exclude<
      GamesAPIClientInterface['developmentTeamListParams'],
      undefined
    >,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/games/${args.gamePk}/development-team`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('ordering' in args) {
      options.params = options.params.set('ordering', String(args.ordering));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('page_size', String(args.pageSize));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get a list of games that are part of the same series.
   * Response generated for [ 200 ] HTTP response code.
   */
  gameSeriesList(
    args: Exclude<GamesAPIClientInterface['gameSeriesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  gameSeriesList(
    args: Exclude<GamesAPIClientInterface['gameSeriesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  gameSeriesList(
    args: Exclude<GamesAPIClientInterface['gameSeriesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  gameSeriesList(
    args: Exclude<GamesAPIClientInterface['gameSeriesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/games/${args.gamePk}/game-series`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('page_size', String(args.pageSize));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get a list of parent games for DLC's and editions.
   * Response generated for [ 200 ] HTTP response code.
   */
  parentGamesList(
    args: Exclude<GamesAPIClientInterface['parentGamesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  parentGamesList(
    args: Exclude<GamesAPIClientInterface['parentGamesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  parentGamesList(
    args: Exclude<GamesAPIClientInterface['parentGamesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  parentGamesList(
    args: Exclude<GamesAPIClientInterface['parentGamesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/games/${args.gamePk}/parent-games`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('page_size', String(args.pageSize));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get screenshots for the game.
   * Response generated for [ 200 ] HTTP response code.
   */
  screenshotsList(
    args: Exclude<GamesAPIClientInterface['screenshotsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  screenshotsList(
    args: Exclude<GamesAPIClientInterface['screenshotsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  screenshotsList(
    args: Exclude<GamesAPIClientInterface['screenshotsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  screenshotsList(
    args: Exclude<GamesAPIClientInterface['screenshotsListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/games/${args.gamePk}/screenshots`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('ordering' in args) {
      options.params = options.params.set('ordering', String(args.ordering));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('page_size', String(args.pageSize));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get links to the stores that sell the game.
   * Response generated for [ 200 ] HTTP response code.
   */
  storesList(
    args: Exclude<GamesAPIClientInterface['storesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<object>;
  storesList(
    args: Exclude<GamesAPIClientInterface['storesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<object>>;
  storesList(
    args: Exclude<GamesAPIClientInterface['storesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<object>>;
  storesList(
    args: Exclude<GamesAPIClientInterface['storesListParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<object | HttpResponse<object> | HttpEvent<object>> {
    const path = `/games/${args.gamePk}/stores`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    if ('ordering' in args) {
      options.params = options.params.set('ordering', String(args.ordering));
    }
    if ('page' in args) {
      options.params = options.params.set('page', String(args.page));
    }
    if ('pageSize' in args) {
      options.params = options.params.set('page_size', String(args.pageSize));
    }
    return this.http.get<object>(`${this.domain}${path}`, options);
  }

  /**
   * Get details of the game.
   * Response generated for [ 200 ] HTTP response code.
   */
  read(
    args: Exclude<GamesAPIClientInterface['readParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.GameSingle>;
  read(
    args: Exclude<GamesAPIClientInterface['readParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.GameSingle>>;
  read(
    args: Exclude<GamesAPIClientInterface['readParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.GameSingle>>;
  read(
    args: Exclude<GamesAPIClientInterface['readParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<
    | models.GameSingle
    | HttpResponse<models.GameSingle>
    | HttpEvent<models.GameSingle>
  > {
    const path = `/games/${args.id}`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.GameSingle>(`${this.domain}${path}`, options);
  }

  /**
   * Get a list of game achievements.
   * Response generated for [ 200 ] HTTP response code.
   */
  achievementsRead(
    args: Exclude<GamesAPIClientInterface['achievementsReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.ParentAchievement>;
  achievementsRead(
    args: Exclude<GamesAPIClientInterface['achievementsReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.ParentAchievement>>;
  achievementsRead(
    args: Exclude<GamesAPIClientInterface['achievementsReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.ParentAchievement>>;
  achievementsRead(
    args: Exclude<GamesAPIClientInterface['achievementsReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<
    | models.ParentAchievement
    | HttpResponse<models.ParentAchievement>
    | HttpEvent<models.ParentAchievement>
  > {
    const path = `/games/${args.id}/achievements`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.ParentAchievement>(
      `${this.domain}${path}`,
      options,
    );
  }

  /**
   * Get a list of game trailers.
   * Response generated for [ 200 ] HTTP response code.
   */
  moviesRead(
    args: Exclude<GamesAPIClientInterface['moviesReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Movie>;
  moviesRead(
    args: Exclude<GamesAPIClientInterface['moviesReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Movie>>;
  moviesRead(
    args: Exclude<GamesAPIClientInterface['moviesReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Movie>>;
  moviesRead(
    args: Exclude<GamesAPIClientInterface['moviesReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<
    models.Movie | HttpResponse<models.Movie> | HttpEvent<models.Movie>
  > {
    const path = `/games/${args.id}/movies`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Movie>(`${this.domain}${path}`, options);
  }

  /**
   * Get a list of most recent posts from the game's subreddit.
   * Response generated for [ 200 ] HTTP response code.
   */
  redditRead(
    args: Exclude<GamesAPIClientInterface['redditReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Reddit>;
  redditRead(
    args: Exclude<GamesAPIClientInterface['redditReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Reddit>>;
  redditRead(
    args: Exclude<GamesAPIClientInterface['redditReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Reddit>>;
  redditRead(
    args: Exclude<GamesAPIClientInterface['redditReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<
    models.Reddit | HttpResponse<models.Reddit> | HttpEvent<models.Reddit>
  > {
    const path = `/games/${args.id}/reddit`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Reddit>(`${this.domain}${path}`, options);
  }

  /**
   * Get a list of visually similar games.
   * Response generated for [ 200 ] HTTP response code.
   */
  suggestedRead(
    args: Exclude<GamesAPIClientInterface['suggestedReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.GameSingle>;
  suggestedRead(
    args: Exclude<GamesAPIClientInterface['suggestedReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.GameSingle>>;
  suggestedRead(
    args: Exclude<GamesAPIClientInterface['suggestedReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.GameSingle>>;
  suggestedRead(
    args: Exclude<GamesAPIClientInterface['suggestedReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<
    | models.GameSingle
    | HttpResponse<models.GameSingle>
    | HttpEvent<models.GameSingle>
  > {
    const path = `/games/${args.id}/suggested`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.GameSingle>(`${this.domain}${path}`, options);
  }

  /**
   * Get streams on Twitch associated with the game .
   * Response generated for [ 200 ] HTTP response code.
   */
  twitchRead(
    args: Exclude<GamesAPIClientInterface['twitchReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Twitch>;
  twitchRead(
    args: Exclude<GamesAPIClientInterface['twitchReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Twitch>>;
  twitchRead(
    args: Exclude<GamesAPIClientInterface['twitchReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Twitch>>;
  twitchRead(
    args: Exclude<GamesAPIClientInterface['twitchReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<
    models.Twitch | HttpResponse<models.Twitch> | HttpEvent<models.Twitch>
  > {
    const path = `/games/${args.id}/twitch`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Twitch>(`${this.domain}${path}`, options);
  }

  /**
   * Get videos from YouTube associated with the game.
   * Response generated for [ 200 ] HTTP response code.
   */
  youtubeRead(
    args: Exclude<GamesAPIClientInterface['youtubeReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'body',
  ): Observable<models.Youtube>;
  youtubeRead(
    args: Exclude<GamesAPIClientInterface['youtubeReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'response',
  ): Observable<HttpResponse<models.Youtube>>;
  youtubeRead(
    args: Exclude<GamesAPIClientInterface['youtubeReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe?: 'events',
  ): Observable<HttpEvent<models.Youtube>>;
  youtubeRead(
    args: Exclude<GamesAPIClientInterface['youtubeReadParams'], undefined>,
    requestHttpOptions?: HttpOptions,
    observe: any = 'body',
  ): Observable<
    models.Youtube | HttpResponse<models.Youtube> | HttpEvent<models.Youtube>
  > {
    const path = `/games/${args.id}/youtube`;
    const options = {
      ...this.options,
      ...requestHttpOptions,
      observe,
    };

    return this.http.get<models.Youtube>(`${this.domain}${path}`, options);
  }
}
